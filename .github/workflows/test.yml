name: Automated Testing Suite

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run API tests
      run: npm run test:api
      
    - name: Upload API test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: api-test-results
        path: |
          coverage/
          test-results/

  ui-tests:
    name: UI Tests (Cypress)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: npm start &
      
    - name: Wait for application to be ready
      run: |
        npx wait-on http://localhost:3000 --timeout 60000
        
    - name: Run Cypress tests
      uses: cypress-io/github-action@v6
      with:
        start: npm start
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 120
        browser: chrome
        record: false
        
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots
        
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos
        path: cypress/videos

  code-quality:
    name: Code Quality & Coverage
    runs-on: ubuntu-latest
    needs: [api-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run API tests with coverage
      run: npm run test:api -- --coverage --coverageReporters=lcov
      
    - name: Generate coverage report
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "### API Tests Coverage:" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage/lcov-report/index.html ]; then
          echo "Coverage report generated successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "No coverage report found" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/

  deployment-check:
    name: Deployment Health Check
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests]
    
    steps:
    - name: Check Frontend Deployment
      run: |
        echo "Checking frontend deployment..."
        curl -f https://remwaste-frontend.onrender.com || exit 1
        echo "✅ Frontend is accessible"
        
    - name: Check Backend API
      run: |
        echo "Checking backend API..."
        response=$(curl -s https://remwastebackend.onrender.com/items)
        if [[ "$response" == *"error"* ]]; then
          echo "✅ Backend API is responding"
        else
          echo "❌ Backend API unexpected response: $response"
          exit 1
        fi
        
    - name: Test API Authentication
      run: |
        echo "Testing API authentication..."
        response=$(curl -s -X POST https://remwastebackend.onrender.com/login \
          -H "Content-Type: application/json" \
          -d '{"username":"remwaste","password":"12345"}')
        if [[ "$response" == *"token"* ]]; then
          echo "✅ API authentication working"
        else
          echo "❌ API authentication failed: $response"
          exit 1
        fi

  summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests, code-quality, deployment-check]
    if: always()
    
    steps:
    - name: Generate Summary
      run: |
        echo "# 🧪 RemWaste Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- **API Tests**: ${{ needs.api-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **UI Tests**: ${{ needs.ui-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Check**: ${{ needs.deployment-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Application URLs" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: https://remwaste-frontend.onrender.com" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend**: https://remwastebackend.onrender.com" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- API test results and coverage reports uploaded" >> $GITHUB_STEP_SUMMARY
        echo "- Cypress videos and screenshots (if any failures)" >> $GITHUB_STEP_SUMMARY